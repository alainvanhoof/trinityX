- name: "Ensure file is owned by admins"
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: admins
    mode: 0660
  when: item is file

- name: "Ensure backup file is present"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ item }}.bkp"
    owner: root
    group: admins
    mode: 0660
  when: (item is file) and not ((item + ".bkp") is file)

- name: "Ensure comments about managed block is present in (existing) managed files (1)"
  lineinfile:
    path: "{{ item }}"
    line: "{{ scripts_managed_block_comment1 }}" 
    regex: "{{ scripts_managed_block_comment1 }}"
    state: present
  when: item is file

- name: "Ensure comments about managed block is present in (existing) managed files (2)"
  lineinfile:
    path: "{{ item }}"
    line: "{{ scripts_managed_block_comment2 }}" 
    regex: "{{ scripts_managed_block_comment2 }}"
    state: present
    insertafter: "{{ scripts_managed_block_comment1 }}"
  when: item is file

- name: "Check if block  is present in (existing) managed files"
  shell: "cat {{ item }} | grep -E '({{ scripts_managed_block_start_regex }}|{{ scripts_managed_block_end_regex }})'"
  register: grep_managed_block
  when: item is file

- name: "Set is_managed_block_present"
  set_fact:
    is_managed_block_present: "{{ grep_managed_block.stdout != '' }}"

- name: "Ensure block start delimiter is present in (existing) managed files"
  lineinfile:
    path: "{{ item }}"
    line: "{{ scripts_managed_block_start_delimiter }}"
    insertafter: "{{ scripts_managed_block_comment2 }}"
  when: item is file and not is_managed_block_present

- name: "Ensure block end delimiter is present in (existing) managed files"
  lineinfile:
    path: "{{ item }}"
    line: "{{ scripts_managed_block_end_delimiter }}"
    insertafter: "{{ scripts_managed_block_start_delimiter }}"
  when: item is file and not is_managed_block_present